// Bike Turn Signals!

// Scrolls turn signal arrows, ">" or "<" across the matrix in a portrait (vertical) orientation.
// Signals can only be turned off by their corresponding button. For example, if you press the blue button to turn on the right turn signal, 
// pressing the yellow button won't do anything. You can only turn it off using the blue button, and would only THEN be able to turn on the 
// left turn signal by pressing the yellow button. 
// We also incorporated a fun customizable "Text Scrolling" feature, to add a little spunk to your ride and entertain the drivers behind you.
// This feature can be turned on/off via the slide switch on the Circuit Playground. 

// Import Necessary Libraries
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>

// Define Appropriate Things
#define PIN  10
#ifndef PSTR
#define PSTR 
#endif
      
// Declare Our Matrix:
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, PIN,  
 NEO_MATRIX_BOTTOM + NEO_MATRIX_RIGHT 
 + NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG, 
  NEO_GRB + NEO_KHZ800);

// Define Our Constants
int j,c;
int x = matrix.width();
int pass = 0;
int button_1;
int button_2;

// Define Vector of Colors (to be displayed on NeoMatrix)
const uint16_t colors[] = { matrix.Color(230, 0, 0), matrix.Color(230, 153, 230), matrix.Color(204, 204, 0), 
matrix.Color(0, 0, 204), matrix.Color(0, 230, 230), matrix.Color(230, 0, 127), matrix.Color(102, 0, 204), matrix.Color(120, 140, 200) };

void setup() {
  Serial.begin(9600); //Initialize Circuit Playground, NeoMatrix, and Serial Monitor
  matrix.begin();
  CircuitPlayground.begin(); 
  matrix.setTextWrap(false);
  
  // START:
  // CUSTOMIZE BRIGHTNESS
  matrix.setBrightness(40); // Set brightness, try not to blind anybody, but make sure you're seen! 
  // END
  
  matrix.setTextColor(colors[0]);
  pinMode(10, OUTPUT); // Set pin 10 on Circuit Playground as output (
  matrix.show(); // Initialize all pixels to 'off' 
}


void loop() { 
// Clear the matrix and Circuit Playground! All pixels off!
  Serial.println("Start over");
  c = matrix.Color(0, 0, 0); // Set variable "c" at which all pixels = 0, there is no light!
  for (int i = 0; i<256; i++) { // For all 256 LEDs in the NeoMatrix..
  matrix.setPixelColor(i,c); // Set Pixel color = c, aka display NO LIGHT
  }
  matrix.show(); // matrix.show() is ESSENTIAL for making things happen. If we didn't include a matrix.show(), none of the above commands would apply.
  CircuitPlayground.clearPixels(); // Clear NeoPixels on the Circuit Playground as well!


// Display message on NeoMatrix IF the Slide Switch is on (to the left)
if (CircuitPlayground.slideSwitch()) {
  Serial.println("Screening TX");
  digitalWrite(10,HIGH); // Passes data through digital pin 10 on Circuit Playground to DIN port of matrix
  matrix.fillScreen(0); // Clear the screen before the text prints. 
  matrix.setCursor(x, 0); // Set where the text will start scrolling from (remember, x = matrix.width(), which = 32. So, the text will begin scrolling from
                          // the right-most column of the matrix. (And move from right --> left)
  
  // START:
  // CUSTOMIZE TEXT
     matrix.print(F("GO ASTROS!")); // Print whatever message you'd like to on the NeoMatrix
  // END
  
  if(--x < -70) { // Print this text from x = 32 to x = -70 
    x = matrix.width(); 
    if(++pass >= 8) pass = 0; // Rotate between colors (specified above) as message keeps cycling across NeoMatrix
    matrix.setTextColor(colors[pass]);
  }
  matrix.show();
  delay(50);
}

// Turn off the message on NeoMatrix IF the Slide Switch is off (to the right, that is)
else {
  Serial.println("No message");
  matrix.fillScreen(0); // Display nothing if slide switch is to the right
  matrix.show();
}



// Right Turn Signal (Button Pin 1)
// Check if the state of the button has been changed. The default (unpressed) state of the button is LOW, so
// we need to check if it has been changed from LOW to HIGH.
if (CircuitPlayground.rightButton() == HIGH) { // If button is now "HIGH" (that means you initially pressed the button down)
  Serial.println("Blue");
  delay(500); // Give the user a second to hold on/let go
    if (CircuitPlayground.rightButton() == LOW) { // Button = LOW. This means you let go of the button, so the button has officially been pressed!
    Serial.println("Right button press");
    button_1 = 1; // Set variable
    while (button_1 = 1) {
      // Start the right turn signal until we redefine button_1 or break the while loop
         rightSignal(button_1); // This is a function further down in our code!
          
        if (CircuitPlayground.rightButton() == HIGH) { // If you press the button WHILE the turn signal is on, break the while loop
             Serial.print("Holding, 1"); 
             delay(1000); // Slightly inconvenient but a VERY IMPORTANT DELAY FOR THE CODE to work!
             break; // This will take us back up to the top of the loop and clear the pixels
        }   
    }
    }
}



// Left Turn Signal (Button Pin 2)
// Same code as above for the left turn signal
if (CircuitPlayground.leftButton() == HIGH) { 
  Serial.println("yellow");
  delay(100); 
    if (CircuitPlayground.leftButton() == LOW);
    Serial.print("Button press2");
    button_2 = 2;
    while (button_2 = 2) {
      leftSignal(button_2);
        if (CircuitPlayground.leftButton() == HIGH) { 
             Serial.print("Holding, 2"); 
             delay(1000);
             break;
        }
    }
}
}




// Right Turn Signal: The LEDs
// This rightSignal function is called upon when the right button is pressed.
void rightSignal(int button_1) {
  for(j=0; j<10; j++) { 
      digitalWrite(10,HIGH); // Assign pin 10 as HIGH, so CircuitPlayground now sends an output to the NeoMatrix
      Serial.println("Looping right, Blue");
      matrix.fillScreen(0); 
      matrix.setCursor(x-30,0); // Redefine the starting point/cursor such that the text starts in the middle
      matrix.print(F(">>>>>")); // Prints right arrows, scrolls from left --> right (A VERY TRICKY THING to code)
 
       if (++x > 44) { // Have the text (">>>") move 44-32 = 12 points from left to right. 
       x = matrix.width();
       matrix.fillScreen(0); // Clear screen between each movement so that there's open space between the ">" arrows
        delay(10);
       if(++pass >= 8) // Rotate back to the first color for arrow text after cycling through all 8 colors
          pass = 0;
          matrix.setTextColor(colors[pass]);
          // This next if statement causes the Circuit Playground emit two tones (which it alternates between), also makes the right half of
          // the Circuit Playground NeoPixels to blink while the turns signals are on. This allows the user to know whether or not they have successfully
          // turned on their turn signals.
          if ((pass % 2) == 0) { // If the pass is "even" (has scrolled by 2,4,6, or 8 times), then play this tone.
            CircuitPlayground.playTone(300, 50);
            Serial.println("Even!");
            CircuitPlayground.setPixelColor(9,200,0,0); // Light up the right half of the CircuitPlayground
            CircuitPlayground.setPixelColor(8,0,200,0);
            CircuitPlayground.setPixelColor(7,250,100,250);
            CircuitPlayground.setPixelColor(6,200,200,0);
            CircuitPlayground.setPixelColor(5,0,200,200);
          }
          else {
            CircuitPlayground.playTone(200, 50); // If the pass is "odd" (has scrolled by 1,3,5, or 7 times), then play this tone.
            Serial.println("Odd!");
            CircuitPlayground.clearPixels(); // Turn off all NeoPixels on CircuitPlayground
          }
          Serial.println("New color!");    
        }
      delay(50);
      matrix.show();
 }
}


// Left Turn Signal: The LEDs
// Same code as above for left turn signal
void leftSignal(int button_2) { 
  for(j=0; j<10; j++) { 
      digitalWrite(10,HIGH);
      Serial.println("Looping Left, Yellow");
      matrix.fillScreen(0); 
      matrix.setCursor(x-32,0);
      matrix.print(F("<<<<<"));
      
       if(--x < 20) { // Have the text ("<<<") move 32-20 = 12 points from right to left
       x = matrix.width();
       matrix.fillScreen(0);
       delay(10);
       if (++pass >= 8)
         pass = 0;
         matrix.setTextColor(colors[pass]); 
         if ((pass % 2) == 0) {
            CircuitPlayground.playTone(300, 50);
            CircuitPlayground.setPixelColor(0,200,0,0);
            CircuitPlayground.setPixelColor(1,0,200,0);
            CircuitPlayground.setPixelColor(2,250,100,250);
            CircuitPlayground.setPixelColor(3,200,200,0);
            CircuitPlayground.setPixelColor(4,0,200,200);
            Serial.println("Even!");
         }
         else {
            CircuitPlayground.playTone(200, 50);
            Serial.println("Odd!");
            CircuitPlayground.clearPixels();
         }
       }  
      delay(50);
      matrix.show();
 }
}

