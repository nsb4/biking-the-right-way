// Bike Turn Signals!
// Circuit Playground Edition!!
// Scrolls turn signal arrows, ">" or "<" across the matrix in a portrait (vertical) orientation.
// Signals can only be turned off by their corresponding button. For example, if you press the blue button to turn on the right turn signal, 
// pressing the yellow button won't do anything. You can only turn it off using the blue button, and would only THEN be able to turn on the 
// left turn signal by pressing the yellow button. 

#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>


#ifndef PSTR
#define PSTR // Make Arduino Due happy
#endif

#define PIN  10 

// Declare Our Matrix:
// Parameter 1 = width of NeoPixel matrix
// Parameter 2 = height of matrix
// Parameter 3 = pin number (most are valid)
// Parameter 4 = matrix layout flags, add together as needed
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, PIN,  
 NEO_MATRIX_BOTTOM + NEO_MATRIX_RIGHT 
 + NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG, 
  NEO_GRB + NEO_KHZ800);

// Our Constants
int j,c;
int x = matrix.width();
int pass = 0;
int button_1;
int button_2;
const uint16_t colors[] = { matrix.Color(255, 0, 0), matrix.Color(255, 153, 255), matrix.Color(204, 204, 0), 
matrix.Color(0, 0, 204), matrix.Color(0, 255, 255), matrix.Color(255, 0, 127), matrix.Color(102, 0, 204) };
const uint8_t spLEFT[]  PROGMEM ={0xAD,0x0E,0xB0,0x96,0x2B,0x5A,0x8C,0xC2,0x93,0x49,0xAE,0x5C,0x78,0x72,0x1F,
0x23,0xC5,0xBE,0xF6,0xCD,0x6F,0x71,0xEA,0x58,0xA2,0xC4,0x3A,0xF1,0x6D,0x5B,0xE7,0x63,0x04,0x7B,0x4C,0x8A,0x23,
0x03,0xA2,0x35,0xD1,0x80,0x02,0x86,0xF7,0x00,0x00,0x70,0x40,0x17,0xE6,0x08,0x60,0x29,0xFD,0x01,0x00,0x00};


void setup() {
  Serial.begin(9600);
  matrix.begin();
  CircuitPlayground.begin();
  matrix.setTextWrap(false);
  matrix.setBrightness(40);
  matrix.setTextColor(colors[0]);
  matrix.show(); // Initialize all pixels to 'off'   
}


void loop() { 
Serial.println("Start over");

// Clear the matrix! All pixels off!
  c = matrix.Color(0, 0, 0);
  for (int i = 0; i<256; i++) { 
  matrix.setPixelColor(i,c);
  }
  matrix.show();

// Here's a message in the meantime!
  matrix.fillScreen(0);
  matrix.setCursor(x, 0);
  matrix.print(F("Howdy y'all! Don't mess with Texas, don't mess with me!"));
  if(--x < -310) {
    x = matrix.width();
    if(++pass >= 7) pass = 0;
    matrix.setTextColor(colors[pass]);
  }
  matrix.show();
  delay(50);

// Right Turn Signal (Button Pin 1)
// Check if the state of the button has been changed (has it changed from LOW to HIGH?)
if (CircuitPlayground.rightButton() == HIGH) { // If button is now "HIGH" (that means you initially pressed the button down)
  Serial.println("Blue");
  delay(500); // Give the user a second to hold on/let go
    if (CircuitPlayground.rightButton() == LOW) { // Button = LOW. This means you let go of the button, so the button has officially been pressed!
    Serial.println("Right button press");
    button_1 = 1;
    while (button_1 = 1) {
      // Start the turn signal
     rightSignal(button_1); 
     // Start turn signal sounds
     CircuitPlayground.playTone(300, 50);
     CircuitPlayground.playTone(0, 900);
     CircuitPlayground.playTone(200, 50);
      CircuitPlayground.playTone(0, 400);
        if (CircuitPlayground.rightButton() == HIGH) { // If you press the button WHILE the turn signal is on, break the while loop
             Serial.print("Holding, 1"); 
             delay(1000); // Slightly inconvenient but a VERY IMPORTANT DELAY FOR THE WELLNESS OF THE CODE
             break; // This will take us back up to the top of the loop and clear the pixels
        }   
    }
    }
}


// Left Turn Signal (Button Pin 2)
if (CircuitPlayground.leftButton() == HIGH) { 
  Serial.println("yellow");
  delay(100); 
    if (CircuitPlayground.leftButton() == LOW);
    Serial.print("Button press2");
    button_2 = 2;
    while (button_2 = 2) {
      leftSignal(button_2);
     CircuitPlayground.playTone(300, 50);
     CircuitPlayground.playTone(0, 900);
     CircuitPlayground.playTone(200, 50);
      CircuitPlayground.playTone(0, 400);
        if (CircuitPlayground.leftButton() == HIGH) { 
             Serial.print("Holding, 2"); 
             delay(1000);
             break;
        }
    }
}
}

// Right Turn Signal: The LEDs
void rightSignal(int button_1) {
  for(j=0; j<10; j++) { // This j is a counter. Not sure how necessary it is but I don't want to mess with it.
      Serial.println("Looping right, Blue");
     
      matrix.fillScreen(0); 
      matrix.setCursor(x-16,0); // Has the text start in the middle
      matrix.print(F(">>>"));
      
       if (++x > 44) { // Have the text (">>>") move 44-32 = 12 points from left to right
       x = matrix.width();
       matrix.fillScreen(0);
        delay(10);
       if(++pass >= 7) 
          pass = 0;
         matrix.setTextColor(colors[pass]); 
         Serial.println("New color!");
         tone(13,300,20);    
        }
        
      delay(50);
      matrix.show();
      
        if (CircuitPlayground.rightButton() == HIGH) {
         Serial.print("Stop, 1");
         delay(50);
         break;
        }
 }
}

// Left Turn Signal: The LEDs
void leftSignal(int button_2) {
  for(j=0; j<10; j++) { 
      Serial.println("Looping Left, Yellow");

      matrix.fillScreen(0); 
      matrix.setCursor(x-32,0);
      matrix.print(F("<<<"));
      
       if(--x < 20) { // Have the text ("<<<") move 32-20 = 12 points from right to left
       x = matrix.width();
       matrix.fillScreen(0);
       delay(10);
       if(++pass >= 7) pass = 0;
         matrix.setTextColor(colors[pass]); 
         tone(13,300,20); 
        }
        
      delay(50);
      matrix.show();

        if (CircuitPlayground.leftButton() == HIGH) {
         Serial.print("Stop, 2");
         delay(50);
         break;
        }
 }
}

