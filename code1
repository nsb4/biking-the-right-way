// Adafruit_NeoMatrix example for single NeoPixel Shield.
// Scrolls 'Howdy' across the matrix in a portrait (vertical) orientation.

#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#ifndef PSTR
#define PSTR // Make Arduino Due happy
#endif

#define BUTTON_PIN   2 
#define PIN    6 

// MATRIX DECLARATION:
// Parameter 1 = width of NeoPixel matrix
// Parameter 2 = height of matrix
// Parameter 3 = pin number (most are valid)
// Parameter 4 = matrix layout flags, add together as needed:

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8, PIN,  
  NEO_MATRIX_BOTTOM + NEO_MATRIX_LEFT 
  + NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG, 
  NEO_GRB + NEO_KHZ800);

int j;
const uint16_t colors[] = {
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };

void setup() {
  Serial.begin(9600);
  matrix.begin();
  matrix.setTextWrap(false);
  matrix.setBrightness(40);
  matrix.setTextColor(colors[0]);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  matrix.show(); // Initialize all pixels to 'off'
}

int x = matrix.width();
int pass = 0;
bool oldButton = LOW;
int button;

void loop() {
// Check if the state of the button has been changed (has it changed from LOW to HIGH?)
Serial.print(digitalRead(BUTTON_PIN));
if (digitalRead(BUTTON_PIN) == HIGH && oldButton == LOW) { // If button is now "HIGH"
  delay(50); // Give the user a second to hold on/let go
  button = digitalRead(BUTTON_PIN); // Check the button now. 
    if (button = LOW); // Button = LOW. This means you let go of the button, so the button has been pressed
    Serial.print("Button press");
    button = 1;
    while (button = 1) {
      startSignal(button); // Start the turn signal
      
        if (digitalRead(BUTTON_PIN) == HIGH) { // If you press the botton a second time, WHILE the turn signal is on, turn it off
             matrix.fillScreen(0); // SMH NONE OF THESE WORK
             matrix.setBrightness(0); // ME REALLY TRYING TO TURN OFF PIXELS AND FAILING WTF
             matrix.clear(); // NOT EVEN THIS ONE WORKS
             Serial.print("holding"); 
             delay(2000); 
            // button = 0;
            // startSignal(button); // <-- I considered calling a different function but then I wasn't sure how you'd be able to exit it?!?!
    }
    }
  }
  
}


void startSignal(int i) {
  switch(i){
    case 0: turnON(matrix.Color(0, 0, 0), 50);    // Black/off
            break;
    case 1: turnON(matrix.Color(255, 0, 0), 50);  // Red
            break;
  }
}

void turnON(uint16_t c, uint16_t wait) {
  for(j=0; j<10; j++) { // This j is a counter, but honestly somehow I fixed the thing where you have to re-click the problem and I'm not going to mess with it. 
      Serial.println("Looping");
      matrix.setBrightness(50);
      matrix.fillScreen(0); // .fillScreen can fill the screen with any color. Here, we chose 0, so this CLEARS the matrix.
      matrix.setCursor(x, 0);
      matrix.print(F("<<<<<<"));
        if(--x < -6) {
         x = matrix.width();
        }
      delay(wait);
      matrix.show();
        if (digitalRead(BUTTON_PIN) == HIGH) {
         Serial.print("stop");
         break;
        }
   }
}

/*
 * void turnOFF(uint16_t c, uint16_t wait) {
   for(j=0; j<5000; j++) { // ok for whatever reason the j value matters here
  matrix.setBrightness(0);
  Serial.println("off");
        if (digitalRead(BUTTON_PIN) == HIGH) {
         Serial.print("turn back on");
         break;
        }
   }
   }
/*
 * 
 */
